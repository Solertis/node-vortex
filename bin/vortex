#!/usr/bin/env node

// ---

var path = require('path');

// ---

var opt = require('node-getopt')
	.create([
		['f', 'file=ARG', 'Specify the root of a vortex project or a vortex manifest.'],
		['p', 'provider=ARG', 'Specify the default provider.'],
		['v', 'verbose+', 'Make it verbose.'],
		['c', 'colorize', 'Make it pretty.'],
		['h', 'help', 'Display this help.'],
	])
	.bindHelp()
	.parseSystem();
	
// ---

var lib = path.join(__dirname, '..', 'lib');
var logger = require(path.join(lib, 'logger.js'));
var manifest = require(path.join(lib, 'manifest.js'));
var plugins = require(path.join(lib, 'plugins.js'));
var providers = require(path.join(lib, 'providers.js'));
var engine = require(path.join(lib, 'engine.js'));

// ---

if (opt.options.hasOwnProperty('verbose')) {
	logger.setGlobalLevel(3 - (opt.options.verbose.length < 3 ? opt.options.verbose.length : 3));
}

if (opt.options.hasOwnProperty('colorize')) {
	logger.setGlobalColorization(opt.options.colorize);
}

// ---

var vortexLocation;

try {
	vortexLocation = manifest.locate(opt.options.file);
} catch (e) {
	logger.exception(e);
	
	console.error(e.message);
	
	process.exit(2);
}

// ---

var vortexManifest;

try {
	vortexManifest = manifest.load(vortexLocation);
} catch (e) {
	logger.exception(e);
	
	console.error(e.message);
	
	process.exit(3);
}

// ---

var vortexPlugins;

try {
	vortexPlugins = plugins.obtain(vortexManifest);
} catch (e) {
	logger.exception(e);
	
	console.error(e.message);
	
	process.exit(4);
}

// ---

var vortexProvider;

try {
	vortexProvider = opt.options.provider ? providers.instance(opt.options.provider, vortexManifest) : null;
} catch (e) {
	logger.exception(e);
	
	console.error(e.message);
	
	process.exit(5);
}

// ---

var providerAction = opt.argv.length ? opt.argv[0] : 'status';

// ---

var callback = function (err) {
	if (err) {
		logger.exception(err);
		
		console.error(err.message);
		
		// NOTE: too late to exit the process at this stage
	}
};

// ---

try {
	engine.launch(opt, vortexManifest, vortexPlugins, vortexProvider, providerAction, callback);
} catch (e) {
	logger.exception(e);
	
	console.error(e.message);
	
	process.exit(6);
}
